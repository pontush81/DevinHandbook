require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');
const http = require('http');
const { exec } = require('child_process');

// Get environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

// Portnummer som Next.js k√∂r p√• (standard: 3000)
const PORT = process.env.PORT || 3000;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Environment variables missing: NEXT_PUBLIC_SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

// Initialize Supabase client
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Testkonfiguration
const subdomainToTest = process.argv[2] || 'test';

async function checkHandbookExists() {
  console.log(`\nüìä Kontrollerar om handbok med subdom√§n "${subdomainToTest}" existerar...`);
  
  try {
    // Query for handbook by subdomain
    const { data, error } = await supabase
      .from('handbooks')
      .select('*')
      .eq('subdomain', subdomainToTest);

    if (error) {
      console.error('‚ùå Fel vid databasf√∂rfr√•gan:', error);
      return false;
    }

    if (data && data.length > 0) {
      console.log('‚úÖ Handbok hittades i databasen:');
      console.log(`   ID: ${data[0].id}`);
      console.log(`   Namn: ${data[0].name}`);
      console.log(`   Subdom√§n: ${data[0].subdomain}`);
      console.log(`   Skapad: ${new Date(data[0].created_at).toLocaleDateString()}`);
      console.log(`   Publicerad: ${data[0].published ? 'Ja' : 'Nej'}`);
      return true;
    } else {
      console.log('‚ùå Ingen handbok med denna subdom√§n hittades i databasen.');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Ov√§ntat fel:', error);
    return false;
  }
}

function testLocalConnection() {
  return new Promise((resolve) => {
    console.log(`\nüåê Testar lokal anslutning till ${subdomainToTest}.handbok.org:${PORT}...`);
    
    // Testa om Next.js-servern k√∂rs
    const req = http.request({
      hostname: 'localhost',
      port: PORT,
      path: '/',
      method: 'GET',
      timeout: 2000,
    }, (res) => {
      if (res.statusCode === 200) {
        console.log('‚úÖ Next.js-servern k√∂rs p√• port', PORT);
        
        // Nu testa subdom√§nen
        console.log(`\nüîç Testar subdom√§n ${subdomainToTest}.handbok.org:${PORT}...`);
        console.log(`   Anv√§nder 'curl' f√∂r att anropa subdom√§nen med anpassad Host-header...`);
        
        // Anv√§nd curl f√∂r att skicka anpassad Host-header
        exec(`curl -s -H "Host: ${subdomainToTest}.handbok.org" http://localhost:${PORT}`, (error, stdout, stderr) => {
          if (error) {
            console.error('‚ùå Fel vid anrop till subdom√§nen:', error);
            resolve(false);
            return;
          }
          
          if (stderr) {
            console.error('‚ùå Fel fr√•n curl:', stderr);
          }
          
          if (stdout.includes('Handbook Not Found')) {
            console.log('‚ö†Ô∏è Varning: Svar inneh√•ller "Handbook Not Found"');
            console.log('   Detta kan bero p√• att handboken inte finns i databasen');
            console.log('   eller att omskrivningsreglerna inte fungerar korrekt.');
            resolve(false);
          } else if (stdout.includes('<title>')) {
            console.log('‚úÖ Fick HTML-svar fr√•n servern');
            console.log('   Kontroll av omskrivningsregler i next.config.js ser ut att fungera!');
            resolve(true);
          } else {
            console.log('‚ö†Ô∏è Fick svar fr√•n servern, men kunde inte avg√∂ra om det var korrekt.');
            console.log('   F√∂rv√§ntade HTML-svar inneh√•llande <title>-tagg');
            resolve(false);
          }
        });
      } else {
        console.log(`‚ùå Next.js-servern svarade med status ${res.statusCode}`);
        resolve(false);
      }
    });
    
    req.on('error', (err) => {
      console.log('‚ùå Kunde inte ansluta till Next.js-servern:', err.message);
      console.log('   Se till att du har startat servern med "npm run dev"');
      resolve(false);
    });
    
    req.on('timeout', () => {
      req.destroy();
      console.log('‚ùå Timeout vid anslutning till Next.js-servern');
      console.log('   Se till att du har startat servern med "npm run dev"');
      resolve(false);
    });
    
    req.end();
  });
}

async function createTestHandbookIfNeeded() {
  const handbookExists = await checkHandbookExists();
  
  if (!handbookExists) {
    console.log(`\nüìù Handbok saknas. Vill du skapa en testhandbok med subdom√§nen "${subdomainToTest}"? (y/n)`);
    
    // Enkel funktion f√∂r att l√§sa in anv√§ndarinput
    const readInput = () => {
      return new Promise((resolve) => {
        process.stdin.once('data', (data) => {
          resolve(data.toString().trim().toLowerCase());
        });
      });
    };
    
    process.stdout.write('> ');
    const answer = await readInput();
    
    if (answer === 'y' || answer === 'yes') {
      console.log(`\nüîß Skapar testhandbok med subdom√§nen "${subdomainToTest}"...`);
      
      try {
        // Skapa ny handbok
        const { data: handbook, error: handbookError } = await supabase
          .from('handbooks')
          .insert({
            name: `Test Handbook (${subdomainToTest})`,
            subdomain: subdomainToTest,
            published: true,
          })
          .select()
          .single();

        if (handbookError) {
          console.error('‚ùå Fel vid skapande av handbok:', handbookError);
          return false;
        }

        console.log(`‚úÖ Handbok skapad med ID ${handbook.id}`);

        // Skapa en sektion
        const { data: section, error: sectionError } = await supabase
          .from('sections')
          .insert({
            title: 'V√§lkommen',
            description: 'V√§lkommen till denna testhandbok',
            order: 0,
            handbook_id: handbook.id,
          })
          .select()
          .single();

        if (sectionError) {
          console.error('‚ùå Fel vid skapande av sektion:', sectionError);
          return true; // Forts√§tt √§nd√•, handboken √§r skapad
        }

        console.log(`‚úÖ Sektion skapad med ID ${section.id}`);

        // Skapa en sida
        const { data: page, error: pageError } = await supabase
          .from('pages')
          .insert({
            title: 'Startsida',
            content: `# V√§lkommen till ${subdomainToTest}.handbok.org\n\nDetta √§r en testhandbok f√∂r att testa subdom√§n-funktionaliteten lokalt.`,
            order: 0,
            section_id: section.id,
          })
          .select()
          .single();

        if (pageError) {
          console.error('‚ùå Fel vid skapande av sida:', pageError);
          return true; // Forts√§tt √§nd√•, handboken och sektionen √§r skapade
        }

        console.log(`‚úÖ Sida skapad med ID ${page.id}`);
        return true;
      } catch (error) {
        console.error('‚ùå Ov√§ntat fel:', error);
        return false;
      }
    } else {
      console.log('\n‚ùå Ingen handbok skapades.');
      return false;
    }
  }
  
  return handbookExists;
}

async function showInstructions(handbookExists, connectionWorking) {
  console.log('\n====== RESULTAT OCH N√ÑSTA STEG ======\n');
  
  if (handbookExists && connectionWorking) {
    console.log('üéâ Allt ser ut att fungera korrekt!');
    console.log('\nüìã F√∂r att testa i webbl√§saren:');
    console.log(`1. Se till att hosts-filen inneh√•ller "${subdomainToTest}.handbok.org"`);
    console.log(`2. Bes√∂k http://${subdomainToTest}.handbok.org:${PORT} i din webbl√§sare`);
    
  } else if (!handbookExists) {
    console.log('‚ö†Ô∏è Du beh√∂ver skapa en handbok i databasen f√∂rst.');
    console.log('\nüìã K√∂r f√∂ljande kommando:');
    console.log(`   node scripts/create-test-handbook.js ${subdomainToTest}`);
    
  } else if (!connectionWorking) {
    console.log('‚ö†Ô∏è Problem med anslutningen till Next.js-servern.');
    console.log('\nüìã Kontrollera f√∂ljande:');
    console.log('1. Se till att Next.js-servern k√∂rs med "npm run dev"');
    console.log('2. Kontrollera att next.config.js har korrekta rewrites-regler');
    console.log('3. Se till att hosts-filen inneh√•ller korrekta poster');
  }
  
  console.log('\nüí° Beh√∂ver du hj√§lp med hosts-filen?');
  console.log('   P√• macOS/Linux: sudo nano /etc/hosts');
  console.log('   P√• Windows: Redigera C:\\Windows\\System32\\drivers\\etc\\hosts som administrat√∂r');
  console.log('\n   L√§gg till f√∂ljande rader:');
  console.log('   127.0.0.1       handbok.org');
  console.log(`   127.0.0.1       ${subdomainToTest}.handbok.org`);
  
  process.exit(0);
}

async function runTest() {
  console.log('\n====== LOKAL SUBDOM√ÑNTEST ======');
  console.log(`Testar: ${subdomainToTest}.handbok.org p√• port ${PORT}`);
  
  const handbookExists = await createTestHandbookIfNeeded();
  const connectionWorking = await testLocalConnection();
  
  await showInstructions(handbookExists, connectionWorking);
}

runTest(); 