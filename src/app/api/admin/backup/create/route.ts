import { NextRequest, NextResponse } from 'next/server';
import { DatabaseBackupManager, BackupOptions } from '@/lib/backup';
import { getServiceSupabase } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ API: Startar backup-skapande...');

    // S√§kerhetskontroll - endast admin-anv√§ndare
    const supabase = getServiceSupabase();
    
    // H√§mta anv√§ndarens session fr√•n headers
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Ingen auktorisering angiven' },
        { status: 401 }
      );
    }

    // Verifiera att anv√§ndaren √§r admin (du kan anpassa denna logik)
    // F√∂r nu till√•ter vi alla autentiserade anv√§ndare - du kan l√§gga till admin-kontroll senare
    
    // H√§mta backup-alternativ fr√•n request body
    const body = await request.json();
    const options: BackupOptions = {
      includeUserData: body.includeUserData ?? false,
      includeTrialData: body.includeTrialData ?? false,
      excludeTables: body.excludeTables ?? [],
      compression: body.compression ?? true
    };

    console.log('üìã Backup-alternativ:', options);

    // Skapa backup
    const backupManager = new DatabaseBackupManager();
    const backupData = await backupManager.createBackup(options);

    console.log('‚úÖ Backup skapad framg√•ngsrikt');

    return NextResponse.json({
      success: true,
      backup: backupData,
      message: 'Backup skapad framg√•ngsrikt'
    });

  } catch (error) {
    console.error('‚ùå Fel vid skapande av backup:', error);
    
    return NextResponse.json(
      { 
        error: 'Fel vid skapande av backup',
        details: error instanceof Error ? error.message : 'Ok√§nt fel'
      },
      { status: 500 }
    );
  }
} 